<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
  - Version: MPL 1.1/GPL 2.0/LGPL 2.1
  -
  - The contents of this file are subject to the Mozilla Public License Version
  - 1.1 (the "License"); you may not use this file except in compliance with
  - the License. You may obtain a copy of the License at
  - http://www.mozilla.org/MPL/
  -
  - Software distributed under the License is distributed on an "AS IS" basis,
  - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  - for the specific language governing rights and limitations under the
  - License.
  -
  - The Original Code is Mozilla Communicator client code, released
  - March 31, 1998.
  -
  - The Initial Developer of the Original Code is
  - Netscape Communications Corporation.
  - Portions created by the Initial Developer are Copyright (C) 1998-1999
  - the Initial Developer. All Rights Reserved.
  -
  - Contributor(s):
  -   Scott MacGregor <mscott@mozilla.org>
  -
  - Alternatively, the contents of this file may be used under the terms of
  - either of the GNU General Public License Version 2 or later (the "GPL"),
  - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  - in which case the provisions of the GPL or the LGPL are applicable instead
  - of those above. If you wish to allow use of your version of this file only
  - under the terms of either the GPL or the LGPL, and not to allow others to
  - use your version of this file under the terms of the MPL, indicate your
  - decision by deleting the provisions above and replace them with the notice
  - and other provisions required by the GPL or the LGPL. If you do not delete
  - the provisions above, a recipient may use your version of this file under
  - the terms of any one of the MPL, the GPL or the LGPL.
  - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
%globalDTD;
<!ENTITY % messengerDTD SYSTEM "chrome://messenger/locale/messenger.dtd">
%messengerDTD;
]>

<bindings id="SearchBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <!--
    - The glodaSearch binding implements a gloda-backed search mechanism.  The
    -  actual search logic comes from the glodaSearch tab mode in the
    -  mailTabType definition.  This binding serves as a means to display and 
    -  alter the current search query if a "glodaSearch" tab is displayed, or
    -  enter a search query and spawn a new "glodaSearch" tab if one is
    -  currently not displayed.  The "glodaFacets" binding also is used to
    -  display/modify the parameters of the search when on a "glodaSearch" tab.
    -->
  <binding id="glodaSearch" extends="chrome://global/content/bindings/textbox.xml#search-textbox">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>

    <handlers>
      <handler event="command"><![CDATA[
        if (this.value) {
          let searchString = this.value;
          let tabmail = document.getElementById("tabmail");
          // If the current tab is a gloda search tab, reset the value
          //  to the initial search value.  Otherwise, clear it.  This
          //  is the value that is going to be saved with the current
          //  tab when we switch back to it next.
          if (tabmail.currentTabInfo.mode.name == "glodaSearch")
            this.value = tabmail.currentTabInfo.searchString;
          else
            this.value = "";
          // open a new tab with our dude
          tabmail.openTab("glodaSearch", searchString, "everything", "everywhere");
        }
      ]]></handler>
    </handlers>
    
  </binding>

  <!--
    - The glodaFacets binding is used to display additional search constraints
    -  on a "glodaSearch" tab's gloda-backed search.  Because we live in the
    -  "mailContent" panel reused by the "glodaSearch" tab mode, we are always
    -  present, even when we should not be displayed (namely for "folder" and
    -  "message" tab modes).  We leave it up to the mailTabType and glodaSearch
    -  tab mode to ensure that we are shown/hidden at the right times.  (We
    -  could do this ourselves as a tabmail tab monitor, but it is more
    -  intuitive to have our behaviour/relationship made explicit.)
    -->
  <binding id="glodaFacets">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>
    <content orientation="horizontal" hidden="true">
      <xul:label control="glodaFacetType" value="&glodaSearchBar.facet.label;"/>
      <xul:menulist id="glodaFacetType">
        <xul:menupopup>
          <xul:menuitem label="&glodaSearchFacet.everything.label;"
                        value="everything"/>
          <xul:menuitem label="&glodaSearchFacet.subject.label;"
                        value="subject"/>
          <xul:menuitem label="&glodaSearchFacet.involves.label;"
                        value="involves"/>
          <xul:menuitem label="&glodaSearchFacet.to.label;"
                        value="to"/>
          <xul:menuitem label="&glodaSearchFacet.from.label;"
                        value="from"/>
          <xul:menuitem label="&glodaSearchFacet.body.label;"
                        value="body"/>
        </xul:menupopup>
      </xul:menulist>
      <xul:label control="glodaFacetLocation"
                 value="&glodaSearchBar.location.label;"/>
      <xul:menulist id="glodaFacetLocation" anonid="glodaFacetLocation">
        <xul:menupopup>
          <xul:menuitem label="&glodaSearchFacet.everywhere.label;" value="everywhere"/>
          <xul:menuitem anonid="currentFolder" label="" value="currentFolder" hidden="true"/>
          <xul:menu label="&glodaSearchFacet.folder.label;">
            <xul:menupopup type="folder"/>
          </xul:menu>
        </xul:menupopup>
      </xul:menulist>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          this._facetTypeNode =
            document.getAnonymousElementByAttribute(this, "id",
                                                    "glodaFacetType");
          this._facetLocationNode =
            document.getAnonymousElementByAttribute(this, "id",
                                                    "glodaFacetLocation");
          this._currentFolderNode =
            document.getAnonymousElementByAttribute(this, "anonid",
                                                    "currentFolder");
        ]]>
      </constructor>
      <method name="updateStateFromCurrentTab">
        <body><![CDATA[
        /**
         * Update our display state to match the state of the current tab.
         */
          let tabmail = document.getElementById("tabmail");
          let tabInfo = tabMail.currentTabInfo;
          
          this._facetTypeNode.value = tabInfo.facetString;
          if (typeof(tabInfo.location) == "string")
            this._facetLocationNode.value = tabInfo.location;
          else {
          
          }
        ]]></body>
      </method>
      <method name="setLocationFacetToFolder">
        <body><![CDATA[
        /**
         * Update our display state to match the state of the current tab.
         */
          let tabmail = document.getElementById("tabmail");
          let tabInfo = tabMail.currentTabInfo;
          
          this._facetTypeNode.value = tabInfo.facetString;
          if (typeof(tabInfo.location) == "string")
            this._facetLocationNode.value = tabInfo.location;
          else {
          
          }
        ]]></body>

      </method>
    </implementation>
    
    <handlers>
      <handler event="command" phase="bubble"><![CDATA[
        // Have widgetNode be our immediate child, with nodes being a list of
        //  the descendent nodes between eventNode and the actual target.
        // This allows us to know which of our widgets actually got clicked on,
        //  plus makes subsequent processing easier.  (Alternatively, we could
        //  register a command listener on each of our widgets, but that is
        //  arguably just as ugly.) 
        let nodes = [];
        let widgetNode = event.originalTarget;
        while (widgetNode.parentNode != this) {
          nodes.unshift(widgetNode);
          widgetNode = widgetNode.parentNode;
        }
        
        // -- Type Facet
        if (widgetNode == this._facetTypeNode) {
        
        }
        // -- Location Facet
        else if (widgetNode == this._facetLocationNode) {
          if (event.originalTarget._folder) {
            let folder = event.originalTarget._folder;
            this._currentFolderNode.label =
              [node._folder.prettiestName
               for each ([, node] in Iterator(nodes))
               if (node._folder)].join("/");
            this._currentFolderNode.hidden = false;
            this._facetLocationNode.selectedItem = this._currentFolderNode;
          }
        }
        
        dump("Selected folder: " + event.originalTarget._folder + "\n");
        dump("event: " + event + "\n");
        dump("target: " + event.originalTarget + "\n");
        dump("event target id: " + event.originalTarget.id + "\n");
        dump("event tag: " + event.originalTarget.tagName + "\n");
      ]]></handler>
    </handlers>
    
  </binding>


  <binding id="searchbar" extends="chrome://global/content/bindings/textbox.xml#timed-textbox">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>
    <content> 
      <children/>
      <xul:hbox class="quick-search-textbox textbox-input-box" flex="1">
        <html:input class="textbox-input" flex="1" anonid="input" allowevents="true"
                    xbl:inherits="onfocus,onblur,value,type,maxlength,disabled,size,readonly,tabindex,accesskey"/>
      </xul:hbox>
      <xul:toolbarbutton id="quick-search-clearbutton" xbl:inherits=""
                         disabled="true" class="quick-search-clearbutton"
                         onclick="onClearSearch(); return false;"
                         chromedir="&locale.dir;"/>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // initialize the quick search mode based on the checked menu item
          var desiredQuickSearchMode = document.getElementById('quick-search-menupopup').getAttribute('value');             
          
          var menuItems = document.getElementById('quick-search-menupopup').getElementsByAttribute('value', '*');
          var selectedMenuItem;
          for (var index = 0; index < menuItems.length; index++) 
            if (menuItems[index].getAttribute("value") == desiredQuickSearchMode)
            {
              selectedMenuItem = menuItems[index];
              break;
            }
          
          // if we failed to find selectedMenuItemVal in our array of menuitems
          // then just use the first menu item in the array (surely we have at least one menu item!)
          // This scenario happens when we decide to obsolete/delete search modes from 
          // the quick search drop down.
          if (!selectedMenuItem && menuItems.length) {
            selectedMenuItem = menuItems[0];

            selectedMenuItem.setAttribute('checked', 'true');
            this.mQuickSearchMode =
              selectedMenuItem.getAttribute("value");
          }

          this.setSearchCriteriaText();
        ]]>
      </constructor>

      <property name="showingSearchCriteria" onget="return this.getAttribute('searchCriteria') == 'true';"
                onset="this.setAttribute('searchCriteria', val); return val;"/>

      <property name="clearButtonHidden" onget="return document.getElementById('quick-search-clearbutton').getAttribute('clearButtonHidden') == 'true';"
                onset="document.getElementById('quick-search-clearbutton').setAttribute('clearButtonHidden', val); return val;"/>

      <field name="mQuickSearchMode">0</field>

      // DND Observer
      <field name="searchInputDNDObserver" readonly="true"><![CDATA[
      ({
        inputSearch: this,

        onDrop: function (aEvent, aXferData, aDragSession)
        {
          if (aXferData.data) {
            this.inputSearch.focus();
            this.inputSearch.value = aXferData.data;
            this.inputSearch.clearButtonHidden = false;
            onSearchInput(true);
          }
        },

        getSupportedFlavours: function ()
        {
          var flavourSet = new FlavourSet();
          flavourSet.appendFlavour("text/unicode");
          return flavourSet;
        }
      })
      ]]></field>

      <property name="searchMode" onget="return this.mQuickSearchMode;"
                onset="this.mQuickSearchMode = val; document.getElementById('quick-search-menupopup').setAttribute('value', val);"/>

      <method name="setSearchCriteriaText">
        <body><![CDATA[
          this.showingSearchCriteria = true;
         // extract the label value from the menu item
         var menuItems = document.getElementById('quick-search-menupopup').getElementsByAttribute('value', this.searchMode);
         this.inputField.value = menuItems[0].getAttribute('label');
         this.clearButtonHidden = true;
        ]]></body>
      </method>

      <method name="openmenupopup">
        <body>
          <![CDATA[
            document.getElementById('quick-search-menupopup').click();
            return false;
          ]]>
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="input">
        <![CDATA[ 
          if (!this.value) 
            this.clearButtonHidden = true;
          else 
            this.clearButtonHidden = false;
        ]]></handler>

      <handler event="keypress" keycode="VK_UP" modifiers="control" phase="capturing">
        <![CDATA[
          var  menuPopup = document.getElementById('quick-search-menupopup');
          var menuPopupValue = menuPopup.getAttribute('value');
          var menuPopupOrdinal = menuPopup.getElementsByAttribute('value', menuPopupValue)[0].getAttribute('ordinal');
          if (menuPopupOrdinal > 0)
          {
            var nextMenuItem = menuPopup.getElementsByAttribute('ordinal', --menuPopupOrdinal)[0];
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].removeAttribute('checked');
            this.searchMode = nextMenuItem.getAttribute('value');
            nextMenuItem.setAttribute('checked', 'true');
            menuPopup.setAttribute('value', this.searchMode);
          }
        ]]></handler>

      <handler event="keypress" keycode="VK_DOWN" modifiers="control" phase="capturing">
        <![CDATA[
          var menuItemAfterOptions = document.getElementById('quickSearchAfterLastOptionSeparator');
          var lastOrdinal = menuItemAfterOptions.getAttribute('ordinal') - 1;
          var  menuPopup = document.getElementById('quick-search-menupopup');
          var menuPopupValue = menuPopup.getAttribute('value');
          var menuPopupOrdinal = menuPopup.getElementsByAttribute('value', menuPopupValue)[0].getAttribute('ordinal');
          if (menuPopupOrdinal < lastOrdinal)
          {
            var nextMenuItem = menuPopup.getElementsByAttribute('ordinal', ++menuPopupOrdinal)[0];
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].removeAttribute('checked');
            this.searchMode = nextMenuItem.getAttribute('value');
            nextMenuItem.setAttribute('checked', 'true');
            menuPopup.setAttribute('value', this.searchMode);
          }
        ]]></handler>

        <handler event="keypress" keycode="VK_DOWN" modifiers="alt" phase="capturing" action="return this.openmenupopup();"/>
        <handler event="keypress" keycode="VK_UP"   modifiers="alt" phase="capturing" action="return this.openmenupopup();"/>

      <handler event="keypress" keycode="VK_F4" phase="capturing"><![CDATA[
        if (window.navigator.oscpu.substring(0, 3).toLowerCase() != "mac")
          return this.openmenupopup();
      ]]></handler>

      <handler event="dragdrop" phase="capturing">
        nsDragAndDrop.drop(event, this.searchInputDNDObserver);
      </handler>
    </handlers>
  </binding>
  
  <binding id="searchBarDropMarker">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>
    <content popup="_child">
      <children/>
      <xul:stack flex="1">
        <xul:hbox align="center">
          <xul:image class="quick-search-button-image" xbl:inherits="src"/>
        </xul:hbox>
        <xul:hbox align="center">
          <xul:image class="quick-search-button-dropmarker"/>
        </xul:hbox>
      </xul:stack>
    </content>  
  </binding>

</bindings>
