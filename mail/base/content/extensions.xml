<?xml version="1.0"?>

<!DOCTYPE bindings>

<bindings id="thunderbird-addon-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
  <binding id="thunderbird-addon-generic"
           extends="chrome://mozapps/content/extensions/extensions.xml#addon-generic">
    <implementation>
      <constructor><![CDATA[
        ChromeUtils.import("resource://gre/modules/ExtensionParent.jsm");
        ChromeUtils.import("resource://gre/modules/Services.jsm");
        this._updateState = this._updateState.bind(this);
        ExtensionParent.apiManager.on("startup", this._updateState);
        ExtensionParent.apiManager.on("shutdown", this._updateState);
      ]]></constructor>
      <destructor><![CDATA[
        ExtensionParent.apiManager.off("startup", this._updateState);
        ExtensionParent.apiManager.off("shutdown", this._updateState);
      ]]></destructor>
      <method name="_updateState">
        <body><![CDATA[
          this.__proto__.__proto__._updateState.call(this);
          let pending = this.mAddon.pendingOperations;
          let undoButton = this._warningContainer.querySelector("button.undo-btn");

          if (ExtensionSupport.loadedLegacyExtensions.has(this.mAddon.id)) {
            this.setAttribute("active", "true");
            this.removeAttribute("pending");
          }

          if (
            ExtensionSupport.loadedLegacyExtensions.has(this.mAddon.id) &&
            (this.mAddon.userDisabled || pending & AddonManager.PENDING_UNINSTALL)
          ) {
            this.setAttribute("notification", "warning");
            let stringName = this.mAddon.userDisabled ? "warnLegacyDisable" : "warnLegacyUninstall";
            this._warning.textContent = gStrings.mailExt.formatStringFromName(stringName, [this.mAddon.name, gStrings.brandShortName], 2);

            this._warningLink.hidden = true;

            this._warningBtn.label = gStrings.mailExt.GetStringFromName("warnLegacyRestartButton");
            this._warningBtn.setAttribute("oncommand", "BrowserUtils.restartApplication()");
            this._warningBtn.hidden = false;

            if (!undoButton) {
              undoButton = document.createElement("button");
              undoButton.className = "button-link undo-btn";
              undoButton.setAttribute("label", gStrings.mailExt.GetStringFromName("warnLegacyUndoButton"));
              // We shouldn't really attach non-anonymous content to anonymous content, but we can.
              this._warningContainer.insertBefore(undoButton, this._warningContainer.lastElementChild);
            }
            if (this.mAddon.userDisabled) {
              undoButton.setAttribute("oncommand", "document.getBindingParent(this).mAddon.enable()");
            } else {
              undoButton.setAttribute("oncommand", "document.getBindingParent(this).mAddon.cancelUninstall()");
            }
            undoButton.hidden = false;
          } else if (undoButton) {
            undoButton.hidden = true;
          }
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
