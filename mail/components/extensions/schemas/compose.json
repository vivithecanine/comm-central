[
  {
    "namespace": "manifest",
    "types": [
      {
        "$extend": "OptionalPermission",
        "choices": [
          {
            "type": "string",
            "enum": [
              "compose",
              "compose.send"
            ]
          }
        ]
      }
    ]
  },
  {
    "namespace": "compose",
    "types": [
      {
        "id": "ComposeRecipient",
        "choices": [
          {
            "type": "string",
            "description": "A name and email address in the format \"Name <email@example.com>\", or just an email address."
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of a contact or mailing list from the :doc:`contacts` and :doc:`mailingLists` APIs."
              },
              "type": {
                "type": "string",
                "description": "Which sort of object this ID is for.",
                "enum": [
                  "contact",
                  "mailingList"
                ]
              }
            }
          }
        ]
      },
      {
        "id": "ComposeRecipientList",
        "choices": [
          {
            "$ref": "ComposeRecipient"
          },
          {
            "type": "array",
            "items": {
              "$ref": "ComposeRecipient"
            }
          }
        ]
      },
      {
        "id": "ComposeState",
        "type": "object",
        "description": "Represent the state of the message composer.",
        "properties": {
          "canSendNow": {
            "type": "boolean",
            "description": "The message can be send now."
          },
          "canSendLater": {
            "type": "boolean",
            "description": "The message can be send later."
          }
        }
      },
      {
        "id": "ComposeDetails",
        "type": "object",
        "description": "Used by various functions to represent the state of a message being composed. Note that functions using this type may have a partial implementation.",
        "properties": {
          "identityId": {
            "type": "string",
            "description": "The ID of an identity from the :doc:`accounts` API. The settings from the identity will be used in the composed message. If ``replyTo`` is also specified, the ``replyTo`` property of the identity is overridden. The permission <permission>accountsRead</permission> is required to include the ``identityId``.",
            "optional": true
          },
          "from": {
            "$ref": "ComposeRecipient",
            "description": "*Caution*: Setting a value for ``from`` does not change the used identity, it overrides the FROM header. Many email servers do not accept emails where the FROM header does not match the sender identity. Must be set to exactly one valid email address.",
            "optional": true
          },
          "to": {
            "$ref": "ComposeRecipientList",
            "optional": true
          },
          "cc": {
            "$ref": "ComposeRecipientList",
            "optional": true
          },
          "bcc": {
            "$ref": "ComposeRecipientList",
            "optional": true
          },
          "replyTo": {
            "$ref": "ComposeRecipientList",
            "optional": true
          },
          "followupTo": {
            "$ref": "ComposeRecipientList",
            "optional": true
          },
          "newsgroups": {
            "choices": [
              {
                "type": "string",
                "description": "A newsgroup name."
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of newsgroup names."
              }
            ],
            "optional": true
          },
          "relatedMessageId": {
            "description": "The id of the original message (in case of draft, template, forward or reply). Read-only. Is <code>null</code> in all other cases or if the original message was opened from file.",
            "type": "integer",
            "optional": true
          },
          "subject": {
            "type": "string",
            "optional": true
          },
          "type": {
            "type": "string",
            "description": "Read-only. The type of the message being composed, depending on how the compose window was opened by the user.",
            "enum": [
              "draft",
              "new",
              "redirect",
              "reply",
              "forward"
            ],
            "optional": true
          },
          "body": {
            "type": "string",
            "description": "The HTML content of the message. Ignored by ``setComposeDetails``, if used on a plain text composer. If only ``body`` is specified when used with ``beginNew``, ``beginReply`` and similar functions, an HTML message will be created. The recommended usage is to always specify both (``body`` and ``plainTextBody``) and use ``isPlainText`` to select the compose format, or use the users default compose format.",
            "optional": true
          },
          "plainTextBody": {
            "type": "string",
            "description": "The plain text content of the message. Ignored by ``setComposeDetails``, if used on an HTML composer. If only ``plainTextBody`` is specified when used with ``beginNew``, ``beginReply`` and similar functions, a plain text message will be created. The recommended usage is to always specify both (``body`` and ``plainTextBody``) and use ``isPlainText`` to select the compose format, or use the users default compose format.",
            "optional": true
          },
          "isPlainText": {
            "type": "boolean",
            "description": "Wether the message is an HTML message or a plain text message. Can be used to specify the message format in ``beginNew``, ``beginReply`` and similar functions. It is however not possible to change the compose format with ``setComposeDetails``. Note: Using ``isPlainText`` together with a single but conflicting body type (e.g.: ``isPlainText`` = ``true`` and ``body`` is set but not ``plainTextBody``) will cause an exception. ",
            "optional": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "choices": [
                {
                  "$ref": "FileAttachment"
                },
                {
                  "$ref": "ComposeAttachment"
                }
              ]
            },
            "description": "Attachments to add to the message. Only used in the begin* functions.",
            "optional": true
          }
        }
      },
      {
        "id": "FileAttachment",
        "type": "object",
        "description": "Object used to add, update or rename an attachment in a message being composed.",
        "properties": {
          "file": {
            "type": "object",
            "isInstanceOf": "File",
            "additionalProperties": true,
            "description": "The new content for the attachment.",
            "optional": true
          },
          "name": {
            "type": "string",
            "description": "The new name for the attachment, as displayed to the user. If not specified, the name of the provided ``file`` object is used.",
            "optional": true
          }
        }
      },
      {
        "id": "ComposeAttachment",
        "type": "object",
        "description": "Represents an attachment in a message being composed.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique identifier for this attachment."
          },
          "name": {
            "type": "string",
            "optional": true,
            "description": "The name of this attachment, as displayed to the user."
          },
          "size": {
            "type": "integer",
            "optional": true,
            "description": "The size in bytes of this attachment. Read-only."
          }
        }
      }
    ],
    "events": [
      {
        "name": "onBeforeSend",
        "type": "function",
        "description": "Fired when a message is about to be sent from the compose window. This is a user input event handler. For asynchronous listeners some `restrictions <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions>`__ apply.",
        "permissions": [
          "compose"
        ],
        "parameters": [
          {
            "name": "tab",
            "$ref": "tabs.Tab"
          },
          {
            "name": "details",
            "$ref": "ComposeDetails",
            "description": "The current state of the compose window. This is functionally the same as the :ref:`compose.getComposeDetails` function."
          }
        ],
        "returns": {
          "type": "object",
          "properties": {
            "cancel": {
              "type": "boolean",
              "optional": true,
              "description": "Cancels the send."
            },
            "details": {
              "$ref": "ComposeDetails",
              "optional": true,
              "description": "Updates the compose window. See the :ref:`compose.setComposeDetails` function for more information."
            }
          }
        }
      },
      {
        "name": "onAttachmentAdded",
        "type": "function",
        "description": "Fired when an attachment is added to a message being composed.",
        "permissions": [
          "compose"
        ],
        "parameters": [
          {
            "name": "tab",
            "$ref": "tabs.Tab"
          },
          {
            "name": "attachment",
            "$ref": "ComposeAttachment"
          }
        ]
      },
      {
        "name": "onAttachmentRemoved",
        "type": "function",
        "description": "Fired when an attachment is removed from a message being composed.",
        "permissions": [
          "compose"
        ],
        "parameters": [
          {
            "name": "tab",
            "$ref": "tabs.Tab"
          },
          {
            "name": "attachmentId",
            "type": "integer"
          }
        ]
      },
      {
        "name": "onIdentityChanged",
        "type": "function",
        "description": "Fired when the user changes the identity that will be used to send a message being composed.",
        "permissions": [
          "accountsRead"
        ],
        "parameters": [
          {
            "name": "tab",
            "$ref": "tabs.Tab"
          },
          {
            "name": "identityId",
            "type": "string"
          }
        ]
      },
      {
        "name": "onComposeStateChanged",
        "type": "function",
        "description": "Fired when the state of the message composer changed.",
        "parameters": [
          {
            "name": "tab",
            "$ref": "tabs.Tab"
          },
          {
            "name": "state",
            "$ref": "ComposeState"
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "beginNew",
        "type": "function",
        "description": "Open a new message compose window. If the provided ComposeDetails object does not provide ``body``, ``plainTextBody`` or ``isPlainText``, the default compose format of the used/default identity is used. The :ref:`accounts_api` API can be used to get the used/default identity and its default compose format.",
        "async": "callback",
        "parameters": [
          {
            "name": "messageId",
            "description": "If specified, the message or template to edit as a new message.",
            "type": "integer",
            "optional": true,
            "minimum": 1
          },
          {
            "name": "details",
            "$ref": "ComposeDetails",
            "optional": true
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "return",
                "$ref": "tabs.Tab"
              }
            ]
          }
        ]
      },
      {
        "name": "beginReply",
        "type": "function",
        "description": "Open a new message compose window replying to a given message. If the provided ComposeDetails object does not provide ``body``, ``plainTextBody`` or ``isPlainText``, the default compose format of the used/default identity is used. The :ref:`accounts_api` API can be used to get the used/default identity and its default compose format.",
        "async": "callback",
        "parameters": [
          {
            "name": "messageId",
            "description": "The message to reply to, as retrieved using other APIs.",
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "replyType",
            "type": "string",
            "enum": [
              "replyToSender",
              "replyToList",
              "replyToAll"
            ],
            "optional": true
          },
          {
            "name": "details",
            "$ref": "ComposeDetails",
            "optional": true
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "return",
                "$ref": "tabs.Tab"
              }
            ]
          }
        ]
      },
      {
        "name": "beginForward",
        "type": "function",
        "description": "Open a new message compose window forwarding a given message. If the provided ComposeDetails object does not provide ``body``, ``plainTextBody`` or ``isPlainText``, the default compose format of the used/default identity is used. The :ref:`accounts_api` API can be used to get the used/default identity and its default compose format.",
        "async": "callback",
        "parameters": [
          {
            "name": "messageId",
            "description": "The message to forward, as retrieved using other APIs.",
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "forwardType",
            "type": "string",
            "enum": [
              "forwardInline",
              "forwardAsAttachment"
            ],
            "optional": true
          },
          {
            "name": "details",
            "$ref": "ComposeDetails",
            "optional": true
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "return",
                "$ref": "tabs.Tab"
              }
            ]
          }
        ]
      },
      {
        "name": "getComposeDetails",
        "type": "function",
        "async": "callback",
        "description": "Fetches the current state of a compose window. Currently only a limited amount of information is available, more will be added in later versions.",
        "permissions": [
          "compose"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "$ref": "ComposeDetails"
              }
            ]
          }
        ]
      },
      {
        "name": "setComposeDetails",
        "type": "function",
        "async": true,
        "description": "Updates the compose window. Specify only fields that you want to change. Currently only the to/cc/bcc/replyTo/followupTo/newsgroups fields and the subject are implemented. It is not possible to change the compose format.",
        "permissions": [
          "compose"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "name": "details",
            "$ref": "ComposeDetails",
            "description": "The compose format of an already opened compose window cannot be changed. Setting ``details.body``, ``details.plainTextBody`` or ``details.isPlaintext`` will fail if the compose format of the compose window does not match. Use :ref:`compose.getComposeDetails` to get the current compose format."
          }
        ]
      },
      {
        "name": "listAttachments",
        "type": "function",
        "description": "Lists all of the attachments of the message being composed in the specified tab.",
        "permissions": [
          "compose"
        ],
        "async": "callback",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "ComposeAttachment"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "getAttachmentFile",
        "type": "function",
        "description": "Gets the content of a :ref:`compose.ComposeAttachment` as a DOM <code>File</code> object.",
        "async": "callback",
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "description": "The unique identifier for the attachment."
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "type": "object",
                "isInstanceOf": "File",
                "additionalProperties": true
              }
            ]
          }
        ]
      },
      {
        "name": "addAttachment",
        "type": "function",
        "description": "Adds an attachment to the message being composed in the specified tab.",
        "permissions": [
          "compose"
        ],
        "async": "callback",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "name": "attachment",
            "choices": [
              {
                "$ref": "FileAttachment"
              },
              {
                "$ref": "ComposeAttachment"
              }
            ]
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "$ref": "ComposeAttachment"
              }
            ]
          }
        ]
      },
      {
        "name": "updateAttachment",
        "type": "function",
        "description": "Updates the name and/or the content of an attachment in the message being composed in the specified tab. If the specified attachment is a cloud file attachment and the associated provider failed to update the attachment, the function will throw an ``ExtensionError``.",
        "permissions": [
          "compose"
        ],
        "async": "callback",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "name": "attachmentId",
            "type": "integer"
          },
          {
            "name": "attachment",
            "$ref": "FileAttachment"
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "$ref": "ComposeAttachment"
              }
            ]
          }
        ]
      },
      {
        "name": "removeAttachment",
        "type": "function",
        "description": "Removes an attachment from the message being composed in the specified tab.",
        "permissions": [
          "compose"
        ],
        "async": true,
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "name": "attachmentId",
            "type": "integer"
          }
        ]
      },
      {
        "name": "sendMessage",
        "permissions": [
          "compose.send"
        ],
        "type": "function",
        "description": "Sends the message currently being composed.",
        "async": "callback",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "name": "options",
            "type": "object",
            "optional": true,
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "default",
                  "sendNow",
                  "sendLater"
                ]
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "description": "Returns false if the current state of the message composer prevented sending the message.",
            "optional": true,
            "parameters": [
              {
                "name": "return",
                "type": "boolean"
              }
            ]
          }
        ]
      },
      {
        "name": "getComposeState",
        "type": "function",
        "description": "Returns information about the current state of the message composer.",
        "async": "callback",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "return",
                "$ref": "ComposeState"
              }
            ]
          }
        ]
      }
    ]
  }
]
