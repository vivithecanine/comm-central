/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */

@media not (prefers-contrast) {
  :root {
    --thread-pane-flag-fill: var(--color-orange-30);
    --thread-pane-flag-stroke: var(--color-orange-60);
    --thread-pane-unread-fill: var(--color-green-60);
    --thread-pane-unread-stroke: var(--color-green-60);
    --thread-pane-spam-fill: var(--color-red-50);
    --thread-pane-spam-stroke: var(--color-red-70);
    --thread-pane-unread-color: currentColor;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --thread-pane-flag-fill: var(--color-orange-40);
      --thread-pane-flag-stroke: var(--color-orange-50);
      --thread-pane-unread-fill: var(--color-green-50);
      --thread-pane-unread-stroke: var(--color-green-50);
      --thread-pane-spam-fill: var(--color-red-40);
      --thread-pane-spam-stroke: var(--color-red-50);
      --thread-pane-unread-color: var(--color-white);
    }
  }
}

@media (prefers-contrast) {
  :root {
    --thread-pane-unread-color: currentColor;
  }
}

#threadPane > tree-view {
  -moz-context-properties: fill;
  fill: currentColor;
  background-color: var(--tree-view-bg);
  color: var(--tree-view-color);
}

#threadTree tbody [data-properties~="unread"] {
  font-weight: bold;
}

#threadTree tbody [data-properties~="imapdeleted"] :is(td, .subject-line) {
  text-decoration: line-through;
}

#threadTree tbody .children.collapsed[data-properties~="hasUnread"][data-properties~="read"]
  :where(td, .subject-line) {
  text-decoration: underline;
}

#threadTree thead[is="tree-view-table-header"] th::before {
  display: none;
}

#threadTree tbody button {
  min-height: auto;
  min-width: auto;
  padding: 0;
  margin: 0;
  background-color: transparent;
  border: none;
}

[is="tree-view-table-body"]:focus > .selected button {
  color: currentColor;
}

#threadTree button:not(.twisty, .button-column-picker),
#threadTree button:not(.button-column-picker) img {
  display: block;
  margin-inline: auto;
}

#threadTree[rows="thread-card"] button {
  min-height: 16px;
  min-width: 16px;
  opacity: 0.7;
}

#threadTree[rows="thread-card"] button:hover {
  opacity: 1;
  color: currentColor;
}

tr[data-properties~="untagged"][data-properties~="unread"] {
  color: var(--thread-pane-unread-color);
}

tr[is="thread-row"] {
  color: var(--tag-color, currentColor);
}

[is="tree-view-table-body"]:focus tr[is="thread-row"].selected {
  background-color: var(--tag-color, var(--listbox-focused-selected-bg));
  color: var(--tag-contrast-color, var(--listbox-selected-color));
}

/* Thread column */

.tree-view-header-thread img {
  content: var(--icon-thread-sm);
  pointer-events: none;
}

.tree-view-row-thread img {
  content: var(--icon-thread-sm);
  color: inherit;
  /* Don't center align this because it could be the last column, spanning for
     2 columns to account for the picker, therefore a center alignment would be
     wrong. */
  margin-inline-start: 3px;
  opacity: 0.7;
}

tr:not(.children) .tree-view-row-thread img {
  display: none;
}

/* Starred column */

#flaggedColButton img {
  content: var(--icon-star-sm);
}

.tree-view-row-flag button {
  color: var(--tree-view-color);
  opacity: 0.8;
}

.tree-view-row-flag img {
  content: var(--icon-star);
  pointer-events: none;
  fill: color-mix(in srgb, currentColor 10%, transparent);
  stroke: color-mix(in srgb, currentColor 30%, transparent);
}

@media (prefers-color-scheme: dark) {
  .tree-view-row-flag img {
    stroke: color-mix(in srgb, currentColor 40%, transparent);
  }
}

.button-star {
  -moz-context-properties: fill, stroke;
  background-image: var(--icon-star);
  fill: color-mix(in srgb, currentColor 10%, transparent);
  stroke: color-mix(in srgb, currentColor 30%, transparent);
}

[is="tree-view-table-body"]:focus > .selected:not([data-properties~="flagged"]) .button-star {
  fill: color-mix(in srgb, currentColor 20%, transparent);
  stroke: color-mix(in srgb, currentColor 70%, transparent);
}

tr[data-properties~="flagged"] .tree-view-row-flag > .tree-button-flag > img,
tr[data-properties~="flagged"] .button-star {
  fill: var(--thread-pane-flag-fill);
  stroke: var(--thread-pane-flag-stroke);
}

.tree-view-row-flag button:hover {
  opacity: 1;
}

/* Attachment column variations */

#attachmentColButton img {
  content: var(--icon-attachment-sm);
}

.attachmentcol-column img {
  content: var(--icon-attachment-sm);
  color: var(--tree-view-color);
  /* Don't center align this because it could be the last column, spanning for
     2 columns to account for the picker, therefore a center alignment would be
     wrong. */
  margin-inline-start: 3px;
  margin-top: 1px;
  opacity: 0.7;
}

[is="tree-view-table-body"]:focus > .selected .attachmentcol-column img {
  color: currentColor;
}

tr:not([data-properties~="attach"]) .attachmentcol-column img {
  display: none;
}

/* Unread column variations */

#unreadButtonColHeader img {
  content: var(--icon-unread-sm);
}

.tree-view-row-unread button {
  color: var(--tree-view-color);
  opacity: 0.8;
}

.tree-view-row-unread img {
  content: var(--icon-unread-dot);
  pointer-events: none;
  fill: color-mix(in srgb, currentColor 10%, transparent);
  stroke: color-mix(in srgb, currentColor 30%, transparent);
}

tr[data-properties~="unread"] .tree-view-row-unread > .tree-button-unread > img {
  fill: color-mix(in srgb, var(--thread-pane-unread-fill) 50%, transparent);
  stroke: var(--thread-pane-unread-stroke);
}

[is="tree-view-table-body"]:focus > .selected > .tree-view-row-unread > .tree-button-unread > img {
  fill: currentColor;
  stroke: currentColor;
}

tr[data-properties~="unread"].selected .tree-view-row-unread button {
  opacity: 1;
}

.tree-view-row-unread button:hover {
  opacity: 1;
}

/* Subject column variations */

#subjectColButton {
  /* TODO: make this density aware. */
  padding-inline-start: 42px;
  text-indent: 0;
}

tr[is="thread-row"] td > .thread-container {
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  gap: 6px;
  max-height: inherit;
  box-sizing: border-box;
}

tr[is="thread-row"] .subject-line {
  margin-inline-start: calc(16px * var(--thread-level));
  pointer-events: none;
  /* Line height px exception to avoid vertical cut off of characters. This
     should follow and match the density variation height of the row. */
  line-height: 22px;
}

tr[is="thread-row"]:not(.children) .subject-line {
  padding-inline-start: 22px;
}

tr[is="thread-row"] .subject-line img {
  visibility: hidden;
  width: 16px;
  height: 16px;
  vertical-align: sub;
  margin-inline-end: 3px;
}

/* Icons variations for message state in subject column */

tr[data-properties~="new"] .subject-line img {
  visibility: initial;
  content: var(--icon-notify);
  fill: var(--color-yellow-40) !important; /* override the selected, focus rule */
  stroke: var(--color-orange-50) !important; /* override the selected, focus rule */
}

tr[data-properties~="replied"] .subject-line img {
  visibility: initial;
  content: var(--icon-reply-col);
  fill: var(--color-purple-50);
}

tr[data-properties~="redirected"] .subject-line img {
  visibility: initial;
  content: var(--icon-redirect-col);
  fill: var(--color-orange-50);
}

tr[data-properties~="forwarded"] .subject-line img {
  visibility: initial;
  content: var(--icon-forward-col);
  fill: var(--color-blue-50);
}

tr[data-properties~="replied"][data-properties~="forwarded"] .subject-line img {
  visibility: initial;
  content: var(--icon-reply-forward-col);
  fill: var(--color-blue-50);
  stroke: var(--color-purple-50);
}

tr[data-properties~="replied"][data-properties~="redirected"] .subject-line img {
  visibility: initial;
  content: var(--icon-reply-redirect-col);
  fill: var(--color-orange-50);
  stroke: var(--color-purple-50);
}

tr[data-properties~="forwarded"][data-properties~="redirected"] .subject-line img {
  visibility: initial;
  content: var(--icon-forward-redirect-col);
  fill: var(--color-blue-50);
  stroke: var(--color-orange-50);
}

tr[data-properties~="replied"][data-properties~="forwarded"][data-properties~="redirected"] .subject-line img {
  visibility: initial;
  content: var(--icon-reply-forward-redirect-col);
  fill: var(--color-blue-50);
  stroke: var(--color-purple-50);
}

[is="tree-view-table-body"]:focus > .selected .subject-line img {
  fill: currentColor !important;
  stroke: currentColor !important;
}

tr:is([is="thread-row"], [is="thread-card"]) .twisty {
  width: 16px;
  height: 16px;
  flex-shrink: 0;
  color: currentColor;
}

#threadTree tr[is="thread-card"] button.twisty {
  width: 12px;
  height: 13px;
  min-width: 12px;
  min-height: 13px;
}

tr:is([is="thread-row"], [is="thread-card"]):not(.children) .twisty {
  display: none;
}

tr:is([is="thread-row"], [is="thread-card"]) .twisty-icon {
  width: 12px;
  height: 12px;
  content: var(--icon-nav-down-sm);
  margin: 1px;
}

/* Spam column variations */

#junkStatusCol img {
  content: var(--icon-spam-sm);
}

.tree-view-row-spam button {
  color: var(--tree-view-color);
  opacity: 0.8;
}

.tree-view-row-spam img {
  content: var(--icon-spam);
  pointer-events: none;
  fill: color-mix(in srgb, currentColor 10%, transparent);
  stroke: color-mix(in srgb, currentColor 30%, transparent);
}

@media (prefers-color-scheme: dark) {
  .tree-view-row-spam img {
    stroke: color-mix(in srgb, currentColor 40%, transparent);
  }
}

tr[data-properties~="junk"] .tree-view-row-spam > .tree-button-spam > img {
  fill: var(--thread-pane-spam-fill);
  stroke: var(--thread-pane-spam-stroke);
}

.tree-view-row-spam button:hover {
  opacity: 1;
}

/* Delete column variations */
/* TODO: Handle delete button color variations for tagged messages */

/* Correspondent column variations */

#correspondentColButton,
.correspondentcol-column {
  text-indent: 18px;
}

.correspondentcol-column {
  background-repeat: no-repeat;
  background-position-x: 1px;
  background-position-y: center;
  -moz-context-properties: stroke, fill-opacity;
  stroke: currentColor;
  fill-opacity: 0.3;
}

.correspondentcol-column:dir(rtl) {
  background-position-x: right 1px;
}

tr[data-properties~="outgoing"] .correspondentcol-column {
  background-image: var(--icon-nav-forward);
}

tr[data-properties~="outgoing"] .correspondentcol-column:dir(rtl) {
  background-image: var(--icon-nav-back);
}

tr[data-properties~="outgoing"].selected .correspondentcol-column {
  fill-opacity: 0.6;
}

/* Vertical layout cards */

#threadTree[rows="thread-card"] {
  background-color: var(--layout-background-1);
}

tr[is="thread-card"] td {
  padding: 0;
}

tr[is="thread-card"][data-properties~="unread"]:not(.selected, :hover) {
  background-color: var(--tree-view-bg);
}

tr[is="thread-card"][data-properties~="new"] {
  position: relative;
  box-shadow: 0 6px 5px -5px rgba(0, 0, 0, 0.1);
}

.thread-card-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  padding: 3px 9px;
  box-sizing: border-box;
  border-bottom: 1px solid var(--layout-background-3);
}

tr[data-properties~="thread-children"] .thread-card-container {
  margin-inline-start: 24px;
  border-bottom: none;
}

tr[data-properties~="thread-children"] + tr[data-properties~="thread-children"] .thread-card-container {
  border-top: 1px solid var(--layout-background-3);
}

tr[data-properties~="thread-children"] + tr:not([data-properties~="thread-children"]) .thread-card-container {
  border-top: 1px solid var(--layout-background-3);
}

.thread-card-row {
  flex: 1 1 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 6px;
  padding: 0;
  margin: 0;
  line-height: 1.3;
}

.thread-card-row > :is(.sender, .subject) {
  flex: 1 1 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.thread-card-subject-container .sender {
  font-weight: 400;
}

.thread-card-subject-container {
  display: flex;
  align-items: center;
  gap: 3px;
  flex: 1 1 0;
}

.thread-card-subject-container .subject {
  font-size: 1.1rem;
  font-weight: 500;
  flex: 1 1 0;
  overflow: hidden;
  text-overflow: ellipsis;
}

.thread-card-container .date {
  flex: 0 0 auto;
  white-space: nowrap;
  font-size: 0.95rem;
  opacity: 0.85;
}

#threadTree [data-properties~="unread"] .thread-card-container :is(.sender, .subject) {
  font-weight: bold;
}

#threadTree [data-properties~="new"]:not(.selected) .thread-card-container :is(.subject, .date) {
  color: var(--new-folder-color);
}
