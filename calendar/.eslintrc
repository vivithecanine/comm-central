{
  "extends": [
    "../mozilla/toolkit/.eslintrc"
  ],
  "rules": {
    // Enforce newline at the end of file, with no multiple empty lines.
    "eol-last": 2,

    // Disallow using variables outside the blocks they are defined
    "block-scoped-var": 2,

    // Allow trailing commas for easy list extension.  Having them does not
    // impair readability, but also not required either.
    "comma-dangle": 0,

    // Enforce spacing before and after comma
    "comma-spacing": [2, {"before": false, "after": true}],

    // Enforce one true comma style.
    "comma-style": [2, "last"],

    // Enforce curly brace conventions for all control statements.
    "curly": 2,

    // Enforce the spacing around the * in generator functions.
    "generator-star-spacing": [2, "after"],

    // Disallow deletion of variables (deleting properties is fine).
    "no-delete-var": 2,

    // Disallow duplicate arguments in functions.
    "no-dupe-args": 2,

    // Disallow duplicate keys when creating object literals.
    "no-dupe-keys": 2,

    // Disallow a duplicate case label.
    "no-duplicate-case": 2,

    // Disallow the use of empty character classes in regular expressions.
    "no-empty-character-class": 2,

    // Disallow assigning to the exception in a catch block.
    "no-ex-assign": 2,

    // Disallow adding to native types
    "no-extend-native": 2,

    // Disallow double-negation boolean casts in a boolean context.
    "no-extra-boolean-cast": 2,

    // Disallow unnecessary semicolons.
    "no-extra-semi": 2,

    // Disallow mixed spaces and tabs for indentation.
    "no-mixed-spaces-and-tabs": 2,

    // Disallow reassignments of native objects.
    "no-native-reassign": 2,

    // Disallow nested ternary expressions, they make the code hard to read.
    "no-nested-ternary": 2,

    // Disallow use of octal literals.
    "no-octal": 2,

    // Disallow comparisons where both sides are exactly the same.
    "no-self-compare": 2,

    // Disallow sparse arrays, eg. let arr = [,,2].
    // Array destructuring is fine though:
    // for (let [, breakpointPromise] of aPromises)
    "no-sparse-arrays": 2,

    // Disallow trailing whitespace at the end of lines.
    "no-trailing-spaces": 2,

    // Disallow use of the with statement.
    "no-with": 2,

    // Disallow comparisons with the value NaN.
    "use-isnan": 2,

    // Ensure that the results of typeof are compared against a valid string.
    "valid-typeof": 2,

    // disallow the use of object properties of the global object (Math and
    // JSON) as functions
    "no-obj-calls": 2,

    // disallow use of octal escape sequences in string literals, such as
    // var foo = "Copyright \251";
    "no-octal-escape": 2,

    // disallow use of void operator
    "no-void": 2,

    // Will enable these rules later
    "keyword-spacing": 0,
    "block-spacing": 0,
    "no-lonely-if": 0,
    "space-before-blocks": 0,
    "computed-property-spacing": 0,
    "consistent-return": 0,
    "no-redeclare": 0,
    "no-empty": 0,

    // The following rules will not be enabled currently, but are kept here for
    // easier updates in the future.
    "no-else-return": 0,
  }
}
