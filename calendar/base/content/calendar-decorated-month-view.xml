<?xml version="1.0"?>
<!--
   - ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Calendar view code.
   -
   - The Initial Developer of the Original Code is
   -   Joey Minta <jminta@gmail.com>
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Philipp Kewisch <mozilla@kewis.ch>
   -   Berend Cornelius <berend.cornelius@sun.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
-->

<!-- Note that this file depends on helper functions in calUtils.js-->

<bindings id="calendar-specific-view-bindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="calendar-decorated-month-view" extends="chrome://calendar/content/calendar-decorated-month-view.xml#calendar-decorated-month-view-parent">
        <implementation implements="calICalendarView">

            <property name="observerID">
                <getter><![CDATA[
                    return "month-view-observer";
                ]]></getter>
            </property>

            <!--Public methods-->
            <method name="goToDay">
                <parameter name="aDate"/>
                <body><![CDATA[
                    this.displayDaysOff = !this.mWorkdaysOnly;

                    aDate = aDate.getInTimezone(this.timezone);
                    this.setDateRange(aDate.startOfMonth, aDate.endOfMonth);
                    let toolTips = calGetStringArray("calendar",
                                                      ["oneMonthBack", "gotoToday", "oneMonthForward"]);
                    cal.navigationBar.setDateRange(aDate.startOfMonth, aDate.endOfMonth, toolTips);
                    this.showDate(aDate);
                    this.selectedDay = aDate;
                ]]></body>
            </method>
            <method name="getRangeDescription">
                <body><![CDATA[
                    let monthName = calGetString("dateFormat", "month." + (this.rangeStartDate.month + 1) + ".name");
                    return calGetString("calendar", "monthInYear", [monthName, this.rangeStartDate.year]);
                 ]]></body>
             </method>
            <method name="moveView">
                <parameter name="aNumber"/>
                <body><![CDATA[
                    let dates = this.getDateList({});
                    this.displayDaysOff = !this.mWorkdaysOnly;

                    if (!aNumber) {
                        let date = now();
                        this.goToDay(date);
                        this.selectedDay = date;
                    } else {
                        // The first few dates in this list are likely in the month
                        // prior to the one actually being shown (since the month
                        // probably doesn't start on a Sunday).  The 7th item must
                        // be in correct month though.
                        let date = dates[6].clone();

                        date.month += aNumber;
                        // Need to store this before we move
                        let oldSelectedDay = this.selectedDay;

                        this.goToDay(date);

                        // Most of the time we want to select the date with the
                        // same day number in the next month
                        let newSelectedDay = oldSelectedDay.clone();
                        newSelectedDay.month += aNumber;
                        // correct for accidental rollover into the next month
                        if ((newSelectedDay.month - aNumber + 12) % 12 != oldSelectedDay.month) {
                            newSelectedDay.month -= 1;
                            newSelectedDay.day = newSelectedDay.endOfMonth.day;
                        }

                        this.selectedDay = newSelectedDay;
                    }
                ]]></body>
            </method>
        </implementation>
    </binding>

    <binding id="calendar-decorated-month-view-parent" extends="chrome://calendar/content/calendar-month-view.xml#calendar-month-view">
        <implementation>
            <constructor><![CDATA[
                // Set the preference for the default start of the week
                this.weekStartOffset = getPrefSafe("calendar.week.start", 0);
            ]]></constructor>

            <method name="handlePreference">
                <parameter name="aSubject"/>
                <parameter name="aTopic"/>
                <parameter name="aPreference"/>
                <body><![CDATA[
                   aSubject.QueryInterface(Components.interfaces.nsIPrefBranch2);

                   switch (aPreference) {
                       case "calendar.previousweeks.inview":
                           this.updateDaysOffPrefs();
                           this.refreshView();
                           break;

                       case "calendar.week.start":
                           this.weekStartOffset = aSubject.getIntPref(aPreference);
                           // Refresh the view so the settings take effect
                           this.refreshView();
                           break;

                       case "calendar.weeks.inview":
                           this.weeksInView = aSubject.getIntPref(aPreference);
                           break;

                       case "calendar.previousweeks.inview":
                           this.refreshView();
                           break;

                       default:
                           this.handleCommonPreference(aSubject, aTopic, aPreference);
                           break;
                   }
                   return;
                ]]></body>
            </method>

            <!-- this property may be overridden by the
                descendent classes if neeeded  -->
            <property name="weeksInView">
                <getter><![CDATA[
                    return 0;
                ]]></getter>
                <setter><![CDATA[
                    return val;
                ]]></setter>
            </property>

        </implementation>

        <handlers>
            <handler event="DOMMouseScroll"><![CDATA[
              if (!event.ctrlKey &&
                  !event.shiftKey &&
                  !event.altKey &&
                  !event.metaKey) {
                  // In the month view, the only thing that can be scrolled
                  // is the month the user is in. decorated-base takes care
                  // of the shift key, so only move the view when no modifier
                  // is pressed.
                  this.moveView(event.detail < 0 ? -1 : 1);
              }
            ]]></handler>
        </handlers>
    </binding>
</bindings>
