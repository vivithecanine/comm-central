<?xml version="1.0" encoding="UTF-8"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- import-globals-from ../../resources/content/mouseoverPreviews.js -->
<!-- import-globals-from calendar-dnd-listener.js -->
<!-- import-globals-from calendar-ui-utils.js -->
<!-- import-globals-from calendar-views-utils.js -->

<!DOCTYPE bindings SYSTEM "chrome://global/locale/global.dtd" >

<bindings id="calendar-multiday-view-bindings"
  xmlns="http://www.mozilla.org/xbl"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="calendar-header-container" extends="chrome://calendar/content/widgets/calendar-widgets.xml#dragndropContainer">
    <content xbl:inherits="selected" flex="1" class="calendar-event-column-header">
      <children/>
    </content>

    <implementation>
      <field name="mItemBoxes">null</field>
      <constructor><![CDATA[
          this.mItemBoxes = [];
      ]]></constructor>

      <property name="date">
        <getter><![CDATA[
            return this.mDate;
        ]]></getter>
        <setter><![CDATA[
            this.mDate = val;
            return val;
        ]]></setter>
      </property>
      <method name="findBoxForItem">
        <parameter name="aItem"/>
        <body><![CDATA[
            for (let item of this.mItemBoxes) {
                if (aItem && item.occurrence.hasSameIds(aItem)) {
                    // We can return directly, since there will only be one box per
                    // item in the header.
                    return item;
                }
            }
            return null;
        ]]></body>
      </method>

      <method name="addEvent">
        <parameter name="aItem"/>
        <body><![CDATA[
            // prevent same items being added
            if (this.mItemBoxes.some(itemBox => itemBox.occurrence.hashId == aItem.hashId)) {
                return;
            }

            let itemBox = document.createXULElement("calendar-editable-item");
            this.appendChild(itemBox);
            itemBox.calendarView = this.calendarView;
            itemBox.occurrence = aItem;
            let ctxt = this.calendarView.getAttribute("item-context") ||
                       this.calendarView.getAttribute("context");
            itemBox.setAttribute("context", ctxt);

            if (aItem.hashId in this.calendarView.mFlashingEvents) {
                itemBox.setAttribute("flashing", "true");
            }

            this.mItemBoxes.push(itemBox);
            itemBox.parentBox = this;
        ]]></body>
      </method>

      <method name="deleteEvent">
        <parameter name="aItem"/>
        <body><![CDATA[
            for (let i in this.mItemBoxes) {
                if (this.mItemBoxes[i].occurrence.hashId == aItem.hashId) {
                    this.mItemBoxes[i].remove();
                    this.mItemBoxes.splice(i, 1);
                    break;
                }
            }
        ]]></body>
      </method>

      <method name="onDropItem">
        <parameter name="aItem"/>
        <body><![CDATA[
            let newItem = cal.item.moveToDate(aItem, this.mDate);
            newItem = cal.item.setToAllDay(newItem, true);
            return newItem;
        ]]></body>
      </method>

      <method name="selectOccurrence">
        <parameter name="aItem"/>
        <body><![CDATA[
            for (let itemBox of this.mItemBoxes) {
                if (aItem && (itemBox.occurrence.hashId == aItem.hashId)) {
                    itemBox.selected = true;
                }
            }
        ]]></body>
      </method>
      <method name="unselectOccurrence">
        <parameter name="aItem"/>
        <body><![CDATA[
            for (let itemBox of this.mItemBoxes) {
                if (aItem && (itemBox.occurrence.hashId == aItem.hashId)) {
                    itemBox.selected = false;
                }
            }
        ]]></body>
      </method>

    </implementation>

    <handlers>
      <handler event="dblclick" button="0"><![CDATA[
          this.calendarView.controller.createNewEvent(null, this.mDate, null, true);
      ]]></handler>
      <handler event="mousedown"><![CDATA[
          this.calendarView.selectedDay = this.mDate;
      ]]></handler>
      <handler event="click" button="0"><![CDATA[
          if (!(event.ctrlKey || event.metaKey)) {
              this.calendarView.setSelectedItems(0, []);
          }
      ]]></handler>
      <handler event="click" button="2"><![CDATA[
          let newStart = this.calendarView.selectedDay.clone();
          newStart.isDate = true;
          this.calendarView.selectedDateTime = newStart;
          event.stopPropagation();
      ]]></handler>
      <handler event="wheel"><![CDATA[
          if (this.getAttribute("orient") == "vertical") {
              // In vertical view (normal), don't let the parent multiday view
              // handle the scrolling in its bubbling phase. The default action
              // will make the box scroll here.
              event.stopPropagation();
          }
      ]]></handler>
    </handlers>
  </binding>

  <!--
     -  An individual event box, to be inserted into a column.
    -->
  <binding id="calendar-event-box" extends="chrome://calendar/content/calendar-view-core.xml#calendar-editable-item">
    <content mousethrough="never" tooltip="itemTooltip">
      <xul:box xbl:inherits="orient,width,height" flex="1">
        <xul:box anonid="event-container"
                 class="calendar-color-box"
                 xbl:inherits="orient,readonly,flashing,alarm,allday,priority,progress,
                               status,calendar,categories,todoType"
                 flex="1">
          <xul:box class="calendar-event-selection" orient="horizontal" flex="1">
            <xul:stack anonid="eventbox"
                       class="calendar-event-box-container"
                       flex="1"
                       xbl:inherits="context,parentorient=orient,readonly,flashing,alarm,allday,priority,progress,status,calendar,categories">
              <xul:hbox class="calendar-event-details"
                        anonid="calendar-event-details"
                        align="start">
                <xul:image anonid="item-icon"
                           class="calendar-item-image"
                           xbl:inherits="progress,allday,itemType,todoType"/>
                <xul:vbox flex="1">
                  <xul:label anonid="event-name" class="calendar-event-details-core title-desc" crop="end"/>
                  <xul:textbox anonid="event-name-textbox"
                               class="plain calendar-event-details-core calendar-event-name-textbox"
                               hidden="true"
                               wrap="true"/>
                  <xul:label anonid="event-location" class="calendar-event-details-core location-desc" crop="end"/>
                </xul:vbox>
                <xul:hbox anonid="alarm-icons-box"
                          class="alarm-icons-box"
                          align="top"
                          xbl:inherits="flashing"/>
                <xul:image anonid="item-classification-box"
                           class="item-classification-box"/>
              </xul:hbox>
              <xul:stack mousethrough="always" class="calendar-category-box-stack">
                <xul:hbox anonid="category-box"
                          class="calendar-category-box category-color-box calendar-event-selection"
                          xbl:inherits="categories"
                          flex="1"
                          pack="end">
                  <xul:image class="calendar-category-box-gradient"/>
                </xul:hbox>
              </xul:stack>
              <xul:box xbl:inherits="orient">
                <xul:calendar-event-gripbar anonid="gripbar1"
                                            class="calendar-event-box-grippy-top"
                                            mousethrough="never"
                                            whichside="start"
                                            xbl:inherits="parentorient=orient"/>
                <xul:spacer mousethrough="always" flex="1"/>
                <xul:calendar-event-gripbar anonid="gripbar2"
                                            class="calendar-event-box-grippy-bottom"
                                            mousethrough="never"
                                            whichside="end"
                                            xbl:inherits="parentorient=orient"/>
              </xul:box>
              <!-- Do not insert anything here, otherwise the event boxes will
                   not be resizable using the gripbars. If you want to insert
                   additional elements, do so above the box with the gripbars. -->
            </xul:stack>
          </xul:box>
        </xul:box>
      </xul:box>
    </content>

    <implementation>
      <constructor><![CDATA[
          this.orient = this.getAttribute("orient");
      ]]></constructor>

      <!-- fields -->
      <field name="mParentColumn">null</field>

      <!-- methods/properties -->
      <method name="setAttribute">
        <parameter name="aAttr"/>
        <parameter name="aVal"/>
        <body><![CDATA[
            let needsrelayout = false;
            if (aAttr == "orient") {
                if (this.getAttribute("orient") != aVal) {
                    needsrelayout = true;
                }
            }

            // this should be done using lookupMethod(), see bug 286629
            let ret = XULElement.prototype.setAttribute.call(this, aAttr, aVal);

            if (needsrelayout) {
                let eventbox = document.getAnonymousElementByAttribute(this, "anonid", "eventbox");
                eventbox.setAttribute("orient", aVal);
                let gb1 = document.getAnonymousElementByAttribute(this, "anonid", "gripbar1");
                gb1.parentorient = aVal;
                let gb2 = document.getAnonymousElementByAttribute(this, "anonid", "gripbar2");
                gb2.parentorient = aVal;
            }

            return ret;
        ]]></body>
      </method>

      <method name="getOptimalMinSize">
        <body><![CDATA[
            if (this.getAttribute("orient") == "vertical") {
                let minHeight = getOptimalMinimumHeight(this.eventNameLabel) +
                                getSummarizedStyleValues(document.getAnonymousElementByAttribute(this, "anonid", "eventbox"), ["margin-bottom", "margin-top"]) +
                                getSummarizedStyleValues(this, ["border-bottom-width", "border-top-width"]);
                this.setAttribute("minheight", minHeight);
                this.setAttribute("minwidth", "1");
                return minHeight;
            } else {
                this.eventNameLabel.setAttribute("style", "min-width: 2em");
                let minWidth = getOptimalMinimumWidth(this.eventNameLabel);
                this.setAttribute("minwidth", minWidth);
                this.setAttribute("minheight", "1");
                return minWidth;
            }
        ]]></body>
      </method>

      <property name="parentColumn"
        onget="return this.mParentColumn;"
        onset="return (this.mParentColumn = val);"/>

      <property name="startMinute" readonly="true">
        <getter><![CDATA[
            if (!this.mOccurrence) {
                return 0;
            }
            let startDate = this.mOccurrence.startDate || this.mOccurrence.entryDate;
            return startDate.hour * 60 + startDate.minute;
        ]]></getter>
      </property>

      <property name="endMinute" readonly="true">
        <getter><![CDATA[
            if (!this.mOccurrence) {
                return 0;
            }
            let endDate = this.mOccurrence.endDate || this.mOccurrence.dueDate;
            return endDate.hour * 60 + endDate.minute;
        ]]></getter>
      </property>

      <method name="setEditableLabel">
        <body><![CDATA[
            let evl = this.eventNameLabel;
            let item = this.mOccurrence;

            if (item.title && item.title != "") {
                // Use <description> textContent so it can wrap.
                evl.textContent = item.title;
            } else {
                evl.textContent = cal.l10n.getCalString("eventUntitled");
            }

            let gripbar = document.getAnonymousElementByAttribute(this, "anonid", "gripbar1").getBoundingClientRect().height;
            let height = document.getAnonymousElementByAttribute(this, "anonid", "eventbox").getBoundingClientRect().height;
            evl.setAttribute("style", "max-height: " + Math.max(0, height-gripbar * 2) + "px");
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="mousedown" button="0"><![CDATA[
          event.stopPropagation();

          if (this.mEditing) {
              return;
          }

          this.parentColumn.calendarView.selectedDay = this.parentColumn.mDate;
          this.mMouseX = event.screenX;
          this.mMouseY = event.screenY;

          let whichside = event.whichside;
          if (whichside) {
              this.calendarView.setSelectedItems(1,
                  [event.ctrlKey ? this.mOccurrence.parentItem : this.mOccurrence]);

              let snapIntMin = (event.shiftKey &&
                                !event.ctrlKey &&
                                !event.altKey &&
                                !event.metaKey) ? 1 : 15;
              // start edge resize drag
              this.parentColumn.startSweepingToModifyEvent(this, this.mOccurrence, whichside,
                                                           event.screenX, event.screenY,
                                                           snapIntMin);
          } else {
              // may be click or drag,
              // so wait for mousemove (or mouseout if fast) to start item move drag
              this.mInMouseDown = true;
          }
      ]]></handler>

      <handler event="mousemove"><![CDATA[
          if (!this.mInMouseDown) {
              return;
          }

          let deltaX = Math.abs(event.screenX - this.mMouseX);
          let deltaY = Math.abs(event.screenY - this.mMouseY);
          // more than a 3 pixel move?
          if ((deltaX * deltaX + deltaY * deltaY) > 9) {
              if (this.parentColumn) {
                  if (this.editingTimer) {
                      clearTimeout(this.editingTimer);
                      this.editingTimer = null;
                  }

                  this.calendarView.setSelectedItems(1, [this.mOccurrence]);

                  this.mEditing = false;

                  this.parentColumn.startSweepingToModifyEvent(this, this.mOccurrence, "middle", this.mMouseX, this.mMouseY);
                  this.mInMouseDown = false;
              }
          }
      ]]></handler>

      <handler event="mouseout"><![CDATA[
          if (!this.mEditing && this.mInMouseDown && this.parentColumn) {
              if (this.editingTimer) {
                  clearTimeout(this.editingTimer);
                  this.editingTimer = null;
              }

              this.calendarView.setSelectedItems(1, [this.mOccurrence]);

              this.mEditing = false;

              this.parentColumn.startSweepingToModifyEvent(this, this.mOccurrence, "middle", this.mMouseX, this.mMouseY);
              this.mInMouseDown = false;
          }
      ]]></handler>

      <handler event="mouseup"><![CDATA[
          if (this.mEditing) {
              return;
          }

          this.mInMouseDown = false;
      ]]></handler>

      <handler event="mouseover"><![CDATA[
          if (this.calendarView && this.calendarView.controller) {
              event.stopPropagation();
              onMouseOverItem(event);
          }
      ]]></handler>
    </handlers>
  </binding>
</bindings>
