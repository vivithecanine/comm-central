/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/publicdomain/zero/1.0/ */

/**
 * Tests messages generated by ReplyWithTemplate.
 */

// make xpcshell-tests TEST_PATH=mailnews/compose/test/unit/test_autoReply.js

Components.utils.import("resource://testing-common/mailnews/PromiseTestUtils.jsm");

Components.utils.import("resource:///modules/mailServices.js");
Components.utils.import("resource:///modules/mimeParser.jsm");

load("../../../resources/logHelper.js"); // watch for errors in the error console

const kSender = "from@foo.invalid";

var gIncomingMailFile = do_get_file("../../../data/bugmail10"); // mail to reply to
var gTemplateMailFile = do_get_file("../../../data/draft1"); // template
var gTemplateFolder;

function run_test() {
  localAccountUtils.loadLocalMailAccount();
  gTemplateFolder = localAccountUtils.rootFolder
                                     .createLocalSubfolder("Templates");
  run_next_test();
}

add_task(function* copySourceMessage() {
  let promiseCopyListener = new PromiseTestUtils.PromiseCopyListener();
  // Get the message to reply to into the inbox.
  MailServices.copy.CopyFileMessage(gIncomingMailFile,
    localAccountUtils.inboxFolder, null, false, 0, "",
    promiseCopyListener, null);
  yield promiseCopyListener.promise;
});

add_task(function* copyTemplateMessage() {
  let promiseCopyListener = new PromiseTestUtils.PromiseCopyListener();
  // Get a template message into the Templates folder.
  MailServices.copy.CopyFileMessage(gTemplateMailFile,
    gTemplateFolder, null, true, 0, "",
    promiseCopyListener, null);
  yield promiseCopyListener.promise;
});

add_task(function testReplyWithTemplate() {
  testReply();
});

/// Test reply with template.
function testReply() {
  // fake smtp server setup
  let server = setupServerDaemon();
  let smtpServer = getBasicSmtpServer();
  server.start();
  smtpServer.port = server.port;

  let identity = getSmtpIdentity(kSender, smtpServer);
  localAccountUtils.msgAccount.addIdentity(identity);

  let msgHdr = mailTestUtils.firstMsgHdr(localAccountUtils.inboxFolder);
  let templateHdr = mailTestUtils.getMsgHdrN(gTemplateFolder, 0);

  // See <method name="getTemplates"> in searchWidgets.xml
  let msgTemplateUri = gTemplateFolder.URI +
                       "?messageId=" + templateHdr.messageId +
                       "&subject=" + templateHdr.mime2DecodedSubject;
  MailServices.compose.replyWithTemplate(msgHdr, msgTemplateUri, null,
    localAccountUtils.incomingServer);
  server.performTest();
  let headers = MimeParser.extractHeaders(server._daemon.post);
  do_check_true(headers.get("Subject").startsWith("Auto: "));
  do_check_eq(headers.get("Auto-submitted"), "auto-replied");;

  // fake server cleanup
  server.stop();

  let thread = gThreadManager.currentThread;
  while (thread.hasPendingEvents()) {
    thread.processNextEvent(true);
  }
  do_test_finished();
}

