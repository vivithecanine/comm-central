#!/usr/bin/python
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is the Calendar code
#
# The Initial Developer of the Original Code is Mozilla Japan.
# Portions created by the Initial Developer are Copyright (C) 2010
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Makoto Kato <m_kato@ga2.so-net.ne.jp>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

import re

def printTable(f, t):
	i = f
	while i <= t:
		c = array[i]
		print "0x%04x," % c,
		i = i + 1
		if not i % 8:
			print "\n\t",

print '''/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Mozilla Japan.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Makoto Kato <m_kato@ga2.so-net.ne.jp>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* THIS FILE IS GENERATED BY generate_table.py.  DON'T EDIT THIS */
'''

p = re.compile('([0-9A-F]{4,5})[=\>]([0-9A-F]{4,5})')
array = []
globalTable = []
globalTable.append("0")
maxmapping = 0x10000
sizePerTable = 64

# loading case insensitive table

file = open('nfkc_cf.txt')
line = file.readline()
m = p.match(line)
i = 0x0
while i < maxmapping and line:
	if not m:
		line = file.readline()
		m = p.match(line)
		continue

	if i == int(m.group(1), 16):
		if int(m.group(2), 16) >= maxmapping:
			array.append(i)
		else:
			array.append(int(m.group(2), 16))
		m = None
	else:
		array.append(i)
	i = i + 1
file.close()

# loading normalized table

file = open('nfkc.txt')
line = file.readline()
m = p.match(line)
while line:
	if not m:
		line = file.readline()
		m = p.match(line)
		continue

	if m and (int(m.group(1), 16) < maxmapping) and (int(m.group(2), 16) < maxmapping):
		array[int(m.group(1), 16)] = int(m.group(2), 16)
	m = None
file.close()

# generate a noamlzied table to support case insensitive and accent

i = 0
needTerm = False;
while i < maxmapping:
	if not i % sizePerTable:
		# table is empty?
		j = i
		while j < i + sizePerTable:
			if array[j] != j:
				break
			j += 1

		if j == i + sizePerTable:
			if i:
				globalTable.append("0")
			i += sizePerTable
			continue

		if needTerm:
			print "};\n"
		globalTable.append("gNormalizeTable%04x" % i)
		print "static const unsigned short gNormalizeTable%04x[] = {\n\t" % i,
		print "/* U+%04x */\n\t" % i,
		needTerm = True
	try:
		c = array[array[i]]
	except:
		c = array[i]
        if c >= 0x41 and c <= 0x5a:
            c = c + 0x20
	print "0x%04x," % c,
	i = i + 1
	if not i % 8:
		print "\n\t",

print "};\n\nstatic const unsigned short* gNormalizeTable[] = {",
i = 0
while i < (maxmapping / sizePerTable):
	if not i % 4:
		print "\n\t",
	print globalTable[i] + ",", 
	i += 1

print '''
};

unsigned int normalize_character(const unsigned int c)
{
  if (c > 0x10000 || !gNormalizeTable[c >> 6])
    return c;
  return gNormalizeTable[c >> 6][c & 0x3f];
}
'''
