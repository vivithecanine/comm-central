/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIMsgFolder;
interface nsIMsgDBHdr;

[scriptable, uuid(7512f927-b8f0-48c4-b101-03e859e61281)]
interface nsIAutoSyncState : nsISupports {

  /**
   * Auto-Sync states.
   *
   * ***WARNING***: If you change these, be sure to update stateStrings in
   * nsAutoSyncState.cpp. If you do not, out-of-bounds memory accesses may
   * happen.
   */

  /** Initial state.  Returned to after new messages downloaded */
  const long stCompletedIdle = 0;

  /**
   * STATUS issued (URL "folderstatus"). Will check to see if new messages
   * are present.
   */
  const long stStatusIssued = 1;

  /**
   * Occurs when imap APPEND, COPY or MOVE imap command and adds messages that
   * may not be detected in autosync stStatusIssued state. These are the
   * "pending" messages referred to in the autosync code.
   * Update (URL "select") will be issued next.
   */
  const long stUpdateNeeded = 2;

  /**
   * Update issued (URL "select"). Will figure out if there are any bodies to
   * download after new headers are fetched.
   */
  const long stUpdateIssued = 3;

  /** ready to download the next group of messages */
  const long stReadyToDownload = 4;

  /**
   * Fetch body issued (URL "fetch"). Group of message bodies download in
   * progress. If more are needed, next state is stReadyToDownload; otherwise,
   * next state is stCompleteIdle.
   */
  const long stDownloadInProgress = 5;

  /**
   * Puts the download queue offset to its previous position.
   */
  void rollback();

  /**
   * Clears the download queue. Resets the offsets.
   */
  void resetDownloadQ();

  /**
   * Rollbacks the offset to the previous position and
   * changes the state to ready-to-download.
   */
  void tryCurrentGroupAgain(in unsigned long aRetryCount);

  /**
   * Resets the retry counter.
   */
  void resetRetryCounter();

  /**
   * Tests whether the given folder has the same imap server.
   */
  boolean isSibling(in nsIAutoSyncState aAnotherStateObj);

  /**
   * Update the folder to find new message headers to download
   */
  void updateFolder();

  /**
   * Downloads the bodies of the given messages from the server.
   */
  void downloadMessagesForOffline(in Array<nsIMsgDBHdr> aMessageList);

  /**
   * Returns an array containing the nsIMsgDBHdrs of the messages that will
   * be downloaded next.
   *
   * @param aSuggestedGroupSizeLimit suggested size per group in bytes
   * @param aActualGroupSize total size of the messages in bytes in the group
   */
  Array<nsIMsgDBHdr> getNextGroupOfMessages(in unsigned long aSuggestedGroupSizeLimit,
                                            out unsigned long aActualGroupSize);

  /**
   * Iterates through the existing headers of the folder to find
   * the messages not downloaded yet.
   *
   * @param aNumberOfHeadersToProcess number of headers to be processed
   *                                  at this pass
   *
   * @return the number of headers left to process
   */
  unsigned long processExistingHeaders(in unsigned long aNumberOfHeadersToProcess);

  /**
   * Tests whether the download queue is empty.
   */
  boolean isDownloadQEmpty();

  /**
   * Last time the existing headers are completely processed.
   */
  [noscript]readonly attribute PRTime lastSyncTime;

  /**
   * Last time the owner folder is updated.
   */
  [noscript]attribute PRTime lastUpdateTime;

  /**
   * Download operation state.
   */
  attribute long state;

  /**
   * Number of messages waiting to be downloaded.
   */
  readonly attribute long pendingMessageCount;

  /**
   * Total number of messages in the download queue.
   */
  readonly attribute long totalMessageCount;

  /**
   * The folder this auto-sync object is related to.
   */
  readonly attribute nsIMsgFolder ownerFolder;
};
