/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dan Mosedale <dmose@netscape.com> (Original Author)
 *   Kent James <kent@caspia.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "MailNewsTypes2.idl"

interface nsIMsgFilterHitNotify;
interface nsIMsgWindow;
interface nsIMsgDBHdr;
interface nsIStreamListener;

/**
 * This interface is still very much under development, and is not yet stable.
 */

[scriptable, uuid(e2e56690-a676-11d6-80c9-00008646b737)]
interface nsIMsgFilterPlugin : nsISupports
{
    /**
     * Do any necessary cleanup: flush and close any open files, etc.
     */
    void shutdown();

    /**
     * Some protocols (ie IMAP) can, as an optimization, avoid
     * downloading all message header lines.  If your plugin doesn't need
     * any more than the minimal set, it can return false for this attribute.
     */     
    readonly attribute boolean shouldDownloadAllHeaders;

};

/*
 * These interfaces typically implement a Bayesian classifier of messages.
 *
 * Two sets of interfaces may be used: the older junk-only interfaces, and
 * the newer trait-oriented interfaces that treat junk classification as
 * one of a set of classifications to accomplish.
 */

/**
 * Inform a listener of a message's classification aClassification, which
 * can be one of 3 values:  UNCLASSIFIED, GOOD, or JUNK.
 * Pass the indicator aJunkPercent, where 0 is not junk,
 * 100 is junk, and intermediate values represent varying uncertainty.
 */
[scriptable, uuid(b15a0f9c-df07-4af0-9ba8-80dca68ac35d)]
interface nsIJunkMailClassificationListener : nsISupports
{
    void onMessageClassified(in string aMsgURI,
      in nsMsgJunkStatus aClassification,
      in PRUint32 aJunkPercent);

};

[scriptable, uuid(AF247D07-72F0-482d-9EAB-5A786407AA4C)]
interface nsIMsgTraitClassificationListener : nsISupports
{
  /**
   * Inform a listener of a message's match to traits. The list
   * of traits being matched is in aTraits. Corresponding
   * indicator of match (percent) is in aPercents.
   *
   * @param aMsgURI      URI of the message that was classified
   * @param aTraitCount  length of aTraits and aPercents arrays
   * @param aTraits      array of matched trait ids
   * @param aPercents    array of percent match (0 is unmatched, 100 is fully
   *                     matched) of the trait with the corresponding array
   *                     index in aTraits
   */
  void onMessageTraitsClassified(in string aMsgURI,
    in unsigned long aTraitCount,
    [array, size_is(aTraitCount)] in unsigned long aTraits,
    [array, size_is(aTraitCount)] in unsigned long aPercents);
};

[scriptable, uuid(59BA2A0D-2C87-44a0-8ADD-83266A9EA474)]
interface nsIJunkMailPlugin : nsIMsgFilterPlugin
{
    /**
     * Message classifications.
     */
    const nsMsgJunkStatus UNCLASSIFIED = 0;
    const nsMsgJunkStatus GOOD = 1;
    const nsMsgJunkStatus JUNK = 2;

    /**
     * Message junk score constants. Junkscore can only be one of these two
     * values (or not set).
     */
    const nsMsgJunkScore IS_SPAM_SCORE = 100; // junk
    const nsMsgJunkScore IS_HAM_SCORE = 0; // not junk

    /**
     * Trait ids for junk analysis. These values are fixed to ensure
     * backwards compatibility with existing junk-oriented classification
     * code.
     */
     
    const unsigned long GOOD_TRAIT = 1; // good
    const unsigned long JUNK_TRAIT = 2; // junk

    /**
     * Given a message URI, determine what its current classification is
     * according to the current training set.
     */
    void classifyMessage(in string aMsgURI, in nsIMsgWindow aMsgWindow,
                         in nsIJunkMailClassificationListener aListener);

    void classifyMessages(in unsigned long aCount,
                          [array, size_is(aCount)] in string aMsgURIs,
                          in nsIMsgWindow aMsgWindow,
                          in nsIJunkMailClassificationListener aListener);
    
    /**
     * Given a message URI, evaluate its relative match to a list of
     * traits according to the current training set.
     *
     * @param aMsgURI          URI of the message to be evaluated
     * @param aTraitCount      length of aProTraits, aAntiTraits arrays
     * @param aProTraits       array of trait ids for trained messages that
     *                         match the tested trait (for example,
     *                         JUNK_TRAIT if testing for junk)
     * @param aAntiTraits      array of trait ids for trained messages that
     *                         do not match the tested trait (for example,
     *                         GOOD_TRAIT if testing for junk)
     * @param aTraitListener   trait-oriented callback listener (may be null)
     * @param aMsgWindow       current message window (may be null)
     * @param aJunkListener    junk-oriented callback listener (may be null)
     */

    void classifyTraitsInMessage(
           in string aMsgURI,
           in unsigned long aTraitCount,
           [array, size_is(aTraitCount)] in unsigned long aProTraits,
           [array, size_is(aTraitCount)] in unsigned long aAntiTraits,
           in nsIMsgTraitClassificationListener aTraitListener,
           [optional] in nsIMsgWindow aMsgWindow,
           [optional] in nsIJunkMailClassificationListener aJunkListener);

    /**
     * Given an array of message URIs, evaluate their relative match to a
     * list of traits according to the current training set.
     *
     * @param aCount           Number of messages to evaluate
     * @param aMsgURIs         array of URIs of the messages to be evaluated
     * @param aTraitCount      length of aProTraits, aAntiTraits arrays
     * @param aProTraits       array of trait ids for trained messages that
     *                         match the tested trait (for example,
     *                         JUNK_TRAIT if testing for junk)
     * @param aAntiTraits      array of trait ids for trained messages that
     *                         do not match the tested trait (for example,
     *                         GOOD_TRAIT if testing for junk)
     * @param aTraitListener   trait-oriented callback listener (may be null)
     * @param aMsgWindow       current message window (may be null)
     * @param aJunkListener    junk-oriented callback listener (may be null)
     */

    void classifyTraitsInMessages(
           in unsigned long aCount,
           [array, size_is(aCount)] in string aMsgURIs,
           in unsigned long aTraitCount,
           [array, size_is(aTraitCount)] in unsigned long aProTraits,
           [array, size_is(aTraitCount)] in unsigned long aAntiTraits,
           in nsIMsgTraitClassificationListener aTraitListener,
           [optional] in nsIMsgWindow aMsgWindow,
           [optional] in nsIJunkMailClassificationListener aJunkListener);

    /**
     * Called when a user forces the classification of a message. Should
     * cause the training set to be updated appropriately.
     *
     * @arg aMsgURI                     URI of the message to be classified
     * @arg aOldUserClassification      Was it previous manually classified 
     *                                  by the user?  If so, how?
     * @arg aNewClassification          New manual classification.
     * @arg aListener                   Callback (may be null)
     */
    void setMessageClassification(
        in string aMsgURI, in nsMsgJunkStatus aOldUserClassification,
        in nsMsgJunkStatus aNewClassification,
        in nsIMsgWindow aMsgWindow,
        in nsIJunkMailClassificationListener aListener);

    /**
     * Called when a user forces a change in the classification of a message.
     * Should cause the training set to be updated appropriately.
     *
     * @param aMsgURI           URI of the message to be classified
     * @param aOldCount         length of aOldTraits array
     * @param aOldTraits        array of trait IDs of the old
     *                          message classification(s), if any
     * @param aNewCount         length of aNewTraits array
     * @param aNewTraits        array of trait IDs of the new
     *                          message classification(s), if any
     * @param aTraitListener    trait-oriented listener (may be null)
     * @param aMsgWindow        current message window (may be null)
     * @param aJunkListener     junk-oriented listener (may be null)
     */
    void setMsgTraitClassification(
        in string aMsgURI,
        in unsigned long aOldCount,
        [array, size_is(aOldCount)] in unsigned long  aOldTraits,
        in unsigned long aNewCount,
        [array, size_is(aNewCount)] in unsigned long  aNewTraits,
        [optional] in nsIMsgTraitClassificationListener aTraitListener,
        [optional] in nsIMsgWindow aMsgWindow,
        [optional] in nsIJunkMailClassificationListener aJunkListener);

    readonly attribute boolean userHasClassified;
 
    /** Removes the training file and clears out any in memory training tokens. 
        User must retrain after doing this.
    **/
    void resetTrainingData();
};
