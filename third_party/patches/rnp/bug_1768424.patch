From 1026aa90cb67460e3dde86eaffcc7c420dbf73c4 Mon Sep 17 00:00:00 2001
From: Anton <anton@corp.bluecherry.net>
Date: Wed, 26 Jan 2022 06:02:58 +0400
Subject: [PATCH] Allow absence of empty line in armored messages, except
 cleartext signatures.

---
 src/librepgp/stream-armor.cpp                      | 14 ++++++++++++++
 .../message.txt.cleartext-signed-nonewline         | 14 ++++++++++++++
 src/tests/ffi.cpp                                  | 13 +++++++++++++
 src/tests/streams.cpp                              |  4 ++--
 4 files changed, 43 insertions(+), 2 deletions(-)
 create mode 100644 src/tests/data/test_messages/message.txt.cleartext-signed-nonewline

diff --git a/third_party/rnp/src/librepgp/stream-armor.cpp b/third_party/rnp/src/librepgp/stream-armor.cpp
index b696fadf..0b415a1c 100644
--- a/third_party/rnp/src/librepgp/stream-armor.cpp
+++ b/third_party/rnp/src/librepgp/stream-armor.cpp
@@ -658,6 +658,16 @@ armor_skip_line(pgp_source_t *src)
     } while (1);
 }
 
+static bool
+is_base64_line(const char *line, size_t len)
+{
+    for (size_t i = 0; i < len && line[i]; i++) {
+        if (B64DEC[(uint8_t) line[i]] == 0xff)
+            return false;
+    }
+    return true;
+}
+
 static bool
 armor_parse_headers(pgp_source_t *src)
 {
@@ -676,6 +686,10 @@ armor_parse_headers(pgp_source_t *src)
             RNP_LOG("Too long armor header - truncated.");
             header[hdrlen] = '\0';
         } else if (hdrlen) {
+            if (is_base64_line(header, hdrlen)) {
+                RNP_LOG("Warning: no empty line after the base64 headers");
+                return true;
+            }
             src_skip(param->readsrc, hdrlen);
             if (rnp::is_blank_line(header, hdrlen)) {
                 return src_skip_eol(param->readsrc);
diff --git a/third_party/rnp/hg tests/data/test_messages/message.txt.cleartext-signed-nonewline b/third_party/rnp/src/tests/data/test_messages/message.txt.cleartext-signed-nonewline
new file mode 100644
index 00000000..7020fcc3
--- /dev/null
+++ b/third_party/rnp/src/tests/data/test_messages/message.txt.cleartext-signed-nonewline
@@ -0,0 +1,14 @@
+-----BEGIN PGP SIGNED MESSAGE-----
+Hash: SHA256
+This is test message to be signed, and/or encrypted, cleartext signed and detached signed.
+It will use keys from keyrings/1.
+End of message.
+-----BEGIN PGP SIGNATURE-----
+Version: rnp 0.9.0+git20191024.471.5201802
+
+wrkEAQEIACMWIQTpWjy/WDqoCizMU6p7xnCbFcI6SgUCXbK6xwUDAAAAAAAKCRB7xnCbFcI6SjvL
+A/9OOzkgc3JwM2X4uykxu4kvmRWuhKY4hZegu7Nt/eBQm24aNZbHt6z1ZOfMBJGzDzJjAtFdDZ5O
+9LqAvWEf1kqLT2u5v2TB5LHA2GWFNK3WxTapceeWOo+3Q2Ssky0tUBxazHBE14WOdM+MPQevTwtw
+C2Q+p06E1lE+SiIa+KP1Og==
+=AFtl
+-----END PGP SIGNATURE-----
diff --git a/third_party/rnp/src/tests/ffi.cpp b/third_party/rnp/src/tests/ffi.cpp
index 117fd396..04ebe3b5 100644
--- a/third_party/rnp/src/tests/ffi.cpp
+++ b/third_party/rnp/src/tests/ffi.cpp
@@ -7340,6 +7340,19 @@ TEST_F(rnp_tests, test_ffi_op_verify_sig_count)
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
+    /* cleartext signed message without newline */
+    sigcount = 255;
+    assert_rnp_success(rnp_input_from_path(
+      &input, "data/test_messages/message.txt.cleartext-signed-nonewline"));
+    assert_rnp_success(rnp_output_to_null(&output));
+    assert_rnp_success(rnp_op_verify_create(&verify, ffi, input, output));
+    assert_rnp_failure(rnp_op_verify_execute(verify));
+    assert_rnp_success(rnp_op_verify_get_signature_count(verify, &sigcount));
+    assert_int_equal(sigcount, 0);
+    rnp_op_verify_destroy(verify);
+    rnp_input_destroy(input);
+    rnp_output_destroy(output);
+
     /* cleartext signed with malformed signature (wrong mpi len) */
     sigcount = 255;
     assert_rnp_success(
diff --git a/third_party/rnp/src/tests/streams.cpp b/third_party/rnp/src/tests/streams.cpp
index 9b8a7582..7f9c567b 100644
--- a/third_party/rnp/src/tests/streams.cpp
+++ b/third_party/rnp/src/tests/streams.cpp
@@ -1539,9 +1539,9 @@ TEST_F(rnp_tests, test_stream_dearmor_edge_cases)
     len = snprintf(msg, sizeof(msg), "%s\n\n%s\n%s\n%s\n", HDR, b64, CRC, FTR);
     assert_true(try_dearmor(msg, len));
 
-    /* no empty line after the headers */
+    /* no empty line after the headers, now accepted, see #1289 */
     len = snprintf(msg, sizeof(msg), "%s\n%s\n%s\n%s\n", HDR, b64, CRC, FTR);
-    assert_false(try_dearmor(msg, len));
+    assert_true(try_dearmor(msg, len));
 
     /* \r\n line ending */
     len = snprintf(msg, sizeof(msg), "%s\r\n\r\n%s\r\n%s\r\n%s\r\n", HDR, b64, CRC, FTR);
-- 
2.36.1

