# HG changeset patch
# User Kai Engert <kaie@kuix.de>
# Date 1651489058 0
# Node ID ca8356ebfcb2834dbe1690a54e2c88722cc29fbc
# Parent  5bd0226e5808031eace99d1393b4e0a5acb50ce2
Bug 1763641 - Continue to allow SHA-1 in OpenPGP binding signatures and revocation signatures. r=mkmelin

Differential Revision: https://phabricator.services.mozilla.com/D145220
diff --git a/third_party/rnp/src/lib/crypto/signatures.cpp b/third_party/rnp/src/lib/crypto/signatures.cpp
--- a/third_party/rnp/src/lib/crypto/signatures.cpp
+++ b/third_party/rnp/src/lib/crypto/signatures.cpp
@@ -261,14 +261,44 @@
                 (int) sig.palg,
                 (int) key.alg);
         return RNP_ERROR_BAD_PARAMETERS;
     }
 
-    /* Check signature security */
-    if (ctx.profile.hash_level(sig.halg, sig.creation()) < rnp::SecurityLevel::Default) {
-        RNP_LOG("Insecure hash algorithm %d, marking signature as invalid.", sig.halg);
-        return RNP_ERROR_SIGNATURE_INVALID;
+    bool check_security_level = true;
+    if (hash.alg() == PGP_HASH_SHA1) {
+      /* Check signature security */
+      switch (sig.type()) {
+          /* key certifications */
+          case PGP_CERT_GENERIC:
+          case PGP_CERT_PERSONA:
+          case PGP_CERT_CASUAL:
+          case PGP_CERT_POSITIVE:
+          /* subkey binding signature */
+          case PGP_SIG_SUBKEY:
+          case PGP_SIG_PRIMARY:
+          /* direct-key signature */
+          case PGP_SIG_DIRECT:
+          /* revocation signatures */
+          case PGP_SIG_REV_KEY:
+          case PGP_SIG_REV_SUBKEY:
+          case PGP_SIG_REV_CERT:
+              /* Allow */
+              check_security_level = false;
+              break;
+
+          default:
+              break;
+      }
+    }
+
+    if (check_security_level) {
+      /* Only allow if the additional check passes. */
+      if (ctx.profile.hash_level(sig.halg, sig.creation()) < rnp::SecurityLevel::Default) {
+          RNP_LOG("Insecure hash algorithm %d, marking signature as invalid.", sig.halg);
+          return RNP_ERROR_SIGNATURE_INVALID;
+
+      }
     }
 
     /* Finalize hash */
     uint8_t hval[PGP_MAX_HASH_SIZE];
     size_t  hlen = 0;
